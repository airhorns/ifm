/* tslint:disable */
/** Generated in 2018-07-29T14:41:04+00:00 */

export type DateTime = any;

export type Json = any;

export interface Query {
  deviceConfiguration: DeviceConfiguration /** Get the details of one DeviceConfiguration object */;
  deviceConfigurations: DeviceConfiguration[] /** Get all the configured devices as DeviceConfiguration objects */;
  deviceControllerConfiguration: DeviceControllerConfiguration /** Get the details of one DeviceControllerConfiguration object */;
  deviceControllerConfigurations: DeviceControllerConfiguration[] /** Get all the configured device controllers as DeviceConfigurationController objects */;
  deviceDiscoveryLog: DeviceDiscoveryLog /** Get one DeviceDiscoveryLog */;
  deviceDiscoveryLogs: DeviceDiscoveryLog[] /** List DeviceDiscoveryLogs with scope arguments */;
  farm: Farm /** Get the details of the current farm */;
  farmZones: FarmZone[] /** Get the list of zones for the current farm */;
  schedule: Schedule /** Get the details of a Schedule object */;
  schedules: Schedule[] /** Get the details of many Schedule objects */;
}

export interface DeviceConfiguration {
  controllers: DeviceController[];
  data?: Json | null;
  dataAddress: string;
  deviceClass: string;
  deviceControllerConfigurations: DeviceControllerConfiguration[];
  deviceDiscoveryLog?: DeviceDiscoveryLog | null;
  deviceName: string;
  farmZone: FarmZone;
  farmZoneId: string;
  humanName: string;
  humanNameWithZone: string;
  id: string;
  imageUrl: string;
  lastSeen: DateTime;
  publishers: DevicePublisher[];
}

export interface DeviceController {
  controlStrategyHumanName: string;
  deviceControllerConfiguration: DeviceControllerConfiguration;
  field: string;
  humanName: string;
  humanState: DeviceControllerState;
  icon: string;
  nickname: string;
}

export interface DeviceControllerConfiguration {
  controller: DeviceController;
  controllerStateTransitions: ControllerStateTransition[];
  deviceConfiguration: DeviceConfiguration;
  enabled: boolean;
  field: string;
  fullName: string;
  icon: string;
  id: string;
  nickname: string;
}

export interface ControllerStateTransition {
  confirmedAt?: DateTime | null;
  createdAt: DateTime;
  deviceControllerConfiguration: DeviceControllerConfiguration;
  id: string;
  initiator: string;
  toState: string;
  updatedAt: DateTime;
}

export interface DeviceDiscoveryLog {
  data?: Json | null;
  dataAddress: string;
  deviceClass: string;
  deviceName: string;
  enlistedConfiguration?: DeviceConfiguration | null;
  id: string;
  imageUrl: string;
  lastSeen: DateTime;
  proposedConfiguration: ProposedDeviceConfiguration;
}

export interface ProposedDeviceConfiguration {
  config: Json;
  controllers: DeviceController[];
  publishers: DevicePublisher[];
}

export interface DevicePublisher {
  comprehensionHumanName: string;
  comprehensionUnit?: string | null;
  field: string;
  humanName: string;
  humanValue: string;
  icon: string;
}

export interface FarmZone {
  deviceConfigurations: DeviceConfiguration[];
  id: string;
  name: string;
}

export interface Farm {
  dashboardHost: string;
  farmZones: FarmZone[];
  name: string;
}

export interface Schedule {
  enabled: boolean;
  id: string;
  name: string;
  scheduledControlStates: ScheduledControlState[];
}

export interface ScheduledControlState {
  desiredState: DeviceControllerState;
  deviceControllerConfiguration: DeviceControllerConfiguration;
  id: string;
  recurrence: Recurrence;
}

export interface Recurrence {
  at?: RecurrenceAt[] | null;
  between?: string | null;
  day?: RecurrenceDay[] | null;
  every: string;
  except?: string | null;
  excludeEnd?: string | null;
  hour?: number[] | null;
  interval?: number | null;
  mday?: number[] | null;
  month?: number[] | null;
  on?: string[] | null;
  starts?: string | null;
  total?: number | null;
  until?: string | null;
  week?: number[] | null;
  yday?: number[] | null;
}

export interface RecurrenceAt {
  hour: number;
  minute: number;
  second: number;
}

export interface RecurrenceDay {
  day: number;
  field?: number[] | null;
}

export interface Mutation {
  enlistDevice?: EnlistDevicePayload | null;
  updateDeviceConfiguration?: UpdateDeviceConfigurationPayload | null;
  updateDeviceControllerState?: UpdateDeviceControllerStatePayload | null;
  updateFarm?: UpdateFarmPayload | null;
  updateSchedule?: UpdateSchedulePayload | null;
}
/** Autogenerated return type of EnlistDevice */
export interface EnlistDevicePayload {
  deviceConfiguration?: DeviceConfiguration | null;
  errors: string[];
}
/** Autogenerated return type of UpdateDeviceConfiguration */
export interface UpdateDeviceConfigurationPayload {
  deviceConfiguration?: DeviceConfiguration | null;
  errors: string[];
}
/** Autogenerated return type of UpdateDeviceControllerState */
export interface UpdateDeviceControllerStatePayload {
  controllerStateTransition?: ControllerStateTransition | null;
  deviceController?: DeviceController | null;
  deviceControllerConfiguration?: DeviceControllerConfiguration | null;
  errors: string[];
}
/** Autogenerated return type of UpdateFarm */
export interface UpdateFarmPayload {
  errors: string[];
  farm?: Farm | null;
}
/** Autogenerated return type of UpdateSchedule */
export interface UpdateSchedulePayload {
  errors: string[];
  schedule?: Schedule | null;
}

export interface EnlistControlInput {
  field: string;
  controlNickname: string;
  enabled?: boolean | null;
}

export interface UpdateDeviceConfigurationInput {
  id: string;
  humanName?: string | null;
  farmZoneId?: string | null;
  deviceControllerConfigurations?: DeviceControllerConfigurationInput[] | null;
}

export interface DeviceControllerConfigurationInput {
  id: string;
  field: string;
  nickname: string;
  enabled?: boolean | null;
}

export interface UpdateDeviceControllerStateInput {
  id: string;
  state: string;
}

export interface UpdateFarmInput {
  name?: string | null;
  createFarmZones?: CreateFarmZoneInput[] | null;
  farmZones?: UpdateFarmZoneInput[] | null;
  deleteFarmZones?: DeleteFarmZoneInput[] | null;
}

export interface CreateFarmZoneInput {
  name: string;
}

export interface UpdateFarmZoneInput {
  id: string;
  name?: string | null;
}

export interface DeleteFarmZoneInput {
  id: string;
}

export interface UpdateScheduleInput {
  id?: string | null;
  name: string;
  enabled: boolean;
  scheduledControlStates: UpdateScheduledControlStateInput[];
  createScheduledControlStates: CreateScheduledControlStateInput[];
}

export interface UpdateScheduledControlStateInput {
  id: string;
  recurrence: RecurrenceInput;
  desiredState: DeviceControllerState;
}

export interface RecurrenceInput {
  every: string;
  starts?: string | null;
  until?: string | null;
  between?: string | null;
  hour?: string | null;
  day?: string | null;
  mday?: string | null;
  yday?: string | null;
  week?: string | null;
  month?: string | null;
  interval?: string | null;
  total?: string | null;
  at?: string | null;
  on?: string | null;
  except?: string | null;
  excludeEnd?: string | null;
}

export interface CreateScheduledControlStateInput {
  deviceControllerConfigurationId: string;
  recurrence: RecurrenceInput;
  desiredState: DeviceControllerState;
}
export interface DeviceConfigurationQueryArgs {
  id: string;
}
export interface DeviceDiscoveryLogQueryArgs {
  id: string;
}
export interface DeviceDiscoveryLogsQueryArgs {
  filter?: DiscoveryStateFilter | null;
}
export interface ScheduleQueryArgs {
  id: string;
}
export interface EnlistDeviceMutationArgs {
  deviceDiscoveryLogId: string;
  deviceNickname: string;
  farmZoneId: string;
  enlistControls?: EnlistControlInput[] | null;
}
export interface UpdateDeviceConfigurationMutationArgs {
  input: UpdateDeviceConfigurationInput;
}
export interface UpdateDeviceControllerStateMutationArgs {
  input: UpdateDeviceControllerStateInput;
}
export interface UpdateFarmMutationArgs {
  input: UpdateFarmInput;
}
export interface UpdateScheduleMutationArgs {
  input: UpdateScheduleInput;
}

export enum DeviceControllerState {
  off = "off",
  on = "on",
  unknown = "unknown"
}

export enum DiscoveryStateFilter {
  DISMISSED = "DISMISSED",
  ENLISTED = "ENLISTED",
  PENDING = "PENDING"
}
export namespace GetDeviceControllerConfiguration {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    deviceControllerConfiguration: DeviceControllerConfiguration;
  };

  export type DeviceControllerConfiguration = {
    __typename?: "DeviceControllerConfiguration";
    field: string;
    nickname: string;
    enabled: boolean;
    controller: Controller;
    deviceConfiguration: DeviceConfiguration;
    controllerStateTransitions: ControllerStateTransitions[];
  };

  export type Controller = {
    __typename?: "DeviceController";
    humanName: string;
    humanState: DeviceControllerState;
    controlStrategyHumanName: string;
    icon: string;
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    humanName: string;
  };

  export type ControllerStateTransitions = {
    __typename?: "ControllerStateTransition";
    toState: string;
    initiator: string;
    confirmedAt?: DateTime | null;
    createdAt: DateTime;
  };
}
export namespace UpdateDeviceControllerState {
  export type Variables = {
    input: UpdateDeviceControllerStateInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateDeviceControllerState?: UpdateDeviceControllerState | null;
  };

  export type UpdateDeviceControllerState = {
    __typename?: "UpdateDeviceControllerStatePayload";
    deviceController?: DeviceController | null;
  };

  export type DeviceController = {
    __typename?: "DeviceController";
    humanState: DeviceControllerState;
  };
}
export namespace GetEnlist {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    deviceDiscoveryLog: DeviceDiscoveryLog;
    farmZones: FarmZones[];
  };

  export type DeviceDiscoveryLog = {
    __typename?: "DeviceDiscoveryLog";
    id: string;
    imageUrl: string;
    dataAddress: string;
    deviceName: string;
    lastSeen: DateTime;
    proposedConfiguration: ProposedConfiguration;
    enlistedConfiguration?: EnlistedConfiguration | null;
  };

  export type ProposedConfiguration = {
    __typename?: "ProposedDeviceConfiguration";
    publishers: Publishers[];
    controllers: Controllers[];
  };

  export type Publishers = {
    __typename?: "DevicePublisher";
    humanName: string;
    comprehensionHumanName: string;
    comprehensionUnit?: string | null;
    icon: string;
  };

  export type Controllers = {
    __typename?: "DeviceController";
    field: string;
    humanName: string;
    controlStrategyHumanName: string;
    icon: string;
  };

  export type EnlistedConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    humanName: string;
    humanNameWithZone: string;
    deviceName: string;
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}
export namespace SendEnlist {
  export type Variables = {
    deviceDiscoveryLogId: string;
    deviceNickname: string;
    farmZoneId: string;
    enlistControls: EnlistControlInput[];
  };

  export type Mutation = {
    __typename?: "Mutation";
    enlistDevice?: EnlistDevice | null;
  };

  export type EnlistDevice = {
    __typename?: "EnlistDevicePayload";
    deviceConfiguration?: DeviceConfiguration | null;
    errors: string[];
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
  };
}
export namespace GetDeviceDiscoveryLogs {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    deviceDiscoveryLogs: DeviceDiscoveryLogs[];
  };

  export type DeviceDiscoveryLogs = {
    __typename?: "DeviceDiscoveryLog";
    id: string;
    imageUrl: string;
    dataAddress: string;
    deviceName: string;
    lastSeen: DateTime;
    data?: Json | null;
    enlistedConfiguration?: EnlistedConfiguration | null;
  };

  export type EnlistedConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    humanName: string;
    deviceName: string;
  };
}
export namespace GetDeviceConfiguration {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    deviceConfiguration: DeviceConfiguration;
    farmZones: FarmZones[];
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    imageUrl: string;
    humanName: string;
    deviceName: string;
    lastSeen: DateTime;
    dataAddress: string;
    publishers: Publishers[];
    deviceControllerConfigurations: DeviceControllerConfigurations[];
    farmZoneId: string;
  };

  export type Publishers = {
    __typename?: "DevicePublisher";
    humanName: string;
    humanValue: string;
    comprehensionHumanName: string;
    comprehensionUnit?: string | null;
    icon: string;
  };

  export type DeviceControllerConfigurations = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
    field: string;
    nickname: string;
    enabled: boolean;
    controller: Controller;
  };

  export type Controller = {
    __typename?: "DeviceController";
    humanName: string;
    humanState: DeviceControllerState;
    controlStrategyHumanName: string;
    icon: string;
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}
export namespace UpdateDeviceConfiguration {
  export type Variables = {
    input: UpdateDeviceConfigurationInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateDeviceConfiguration?: UpdateDeviceConfiguration | null;
  };

  export type UpdateDeviceConfiguration = {
    __typename?: "UpdateDeviceConfigurationPayload";
    deviceConfiguration?: DeviceConfiguration | null;
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
  };
}
export namespace GetDeviceConfigurations {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    name: string;
    id: string;
    deviceConfigurations: DeviceConfigurations[];
  };

  export type DeviceConfigurations = {
    __typename?: "DeviceConfiguration";
    id: string;
    imageUrl: string;
    humanName: string;
    deviceName: string;
    lastSeen: DateTime;
    dataAddress: string;
    publishers: Publishers[];
    controllers: Controllers[];
    farmZone: FarmZone;
  };

  export type Publishers = {
    __typename?: "DevicePublisher";
    humanName: string;
    humanValue: string;
    comprehensionHumanName: string;
    comprehensionUnit?: string | null;
    icon: string;
  };

  export type Controllers = {
    __typename?: "DeviceController";
    field: string;
    nickname: string;
    humanName: string;
    humanState: DeviceControllerState;
    controlStrategyHumanName: string;
    icon: string;
    deviceControllerConfiguration: DeviceControllerConfiguration;
  };

  export type DeviceControllerConfiguration = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
  };

  export type FarmZone = {
    __typename?: "FarmZone";
    name: string;
  };
}
export namespace GetFarm {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    farm: Farm;
  };

  export type Farm = {
    __typename?: "Farm";
    name: string;
    dashboardHost: string;
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    name: string;
    deviceConfigurations: DeviceConfigurations[];
  };

  export type DeviceConfigurations = {
    __typename?: "DeviceConfiguration";
    humanName: string;
    deviceControllerConfigurations: DeviceControllerConfigurations[];
  };

  export type DeviceControllerConfigurations = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
    nickname: string;
    controller: Controller;
  };

  export type Controller = {
    __typename?: "DeviceController";
    icon: string;
    humanState: DeviceControllerState;
  };
}
export namespace GetSchedule {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    schedule: Schedule;
    deviceControllerConfigurations: DeviceControllerConfigurations[];
  };

  export type Schedule = {
    __typename?: "Schedule";
    id: string;
    name: string;
    enabled: boolean;
    scheduledControlStates: ScheduledControlStates[];
  };

  export type ScheduledControlStates = {
    __typename?: "ScheduledControlState";
    id: string;
    desiredState: DeviceControllerState;
    deviceControllerConfiguration: DeviceControllerConfiguration;
    recurrence: Recurrence;
  };

  export type DeviceControllerConfiguration = {
    __typename?: "DeviceControllerConfiguration";
    fullName: string;
    controller: Controller;
  };

  export type Controller = {
    __typename?: "DeviceController";
    icon: string;
  };

  export type Recurrence = {
    __typename?: "Recurrence";
    every: string;
  };

  export type DeviceControllerConfigurations = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
    fullName: string;
  };
}
export namespace UpdateSchedule {
  export type Variables = {
    input: UpdateScheduleInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateSchedule?: UpdateSchedule | null;
  };

  export type UpdateSchedule = {
    __typename?: "UpdateSchedulePayload";
    schedule?: Schedule | null;
  };

  export type Schedule = {
    __typename?: "Schedule";
    id: string;
  };
}
export namespace GetSchedules {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    schedules: Schedules[];
  };

  export type Schedules = {
    __typename?: "Schedule";
    id: string;
    name: string;
    enabled: boolean;
    scheduledControlStates: ScheduledControlStates[];
  };

  export type ScheduledControlStates = {
    __typename?: "ScheduledControlState";
    id: string;
    desiredState: DeviceControllerState;
    deviceControllerConfiguration: DeviceControllerConfiguration;
    recurrence: Recurrence;
  };

  export type DeviceControllerConfiguration = {
    __typename?: "DeviceControllerConfiguration";
    nickname: string;
  };

  export type Recurrence = {
    __typename?: "Recurrence";
    every: string;
  };
}
export namespace CreateSchedule {
  export type Variables = {
    input: UpdateScheduleInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateSchedule?: UpdateSchedule | null;
  };

  export type UpdateSchedule = {
    __typename?: "UpdateSchedulePayload";
    schedule?: Schedule | null;
  };

  export type Schedule = {
    __typename?: "Schedule";
    id: string;
  };
}
export namespace GetFarmSettings {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    farm: Farm;
  };

  export type Farm = {
    __typename?: "Farm";
    name: string;
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}
export namespace UpdateFarm {
  export type Variables = {
    input: UpdateFarmInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateFarm?: UpdateFarm | null;
  };

  export type UpdateFarm = {
    __typename?: "UpdateFarmPayload";
    farm?: Farm | null;
    errors: string[];
  };

  export type Farm = {
    __typename?: "Farm";
    name: string;
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}
