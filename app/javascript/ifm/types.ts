/* tslint:disable */
/** Generated in 2018-08-15T01:22:59+00:00 */
import { GraphQLResolveInfo } from "graphql";

export type Resolver<Result, Parent = any, Context = any, Args = any> = (
  parent?: Parent,
  args?: Args,
  context?: Context,
  info?: GraphQLResolveInfo
) => Promise<Result> | Result;

export type SubscriptionResolver<
  Result,
  Parent = any,
  Context = any,
  Args = any
> = {
  subscribe<R = Result, P = Parent>(
    parent?: P,
    args?: Args,
    context?: Context,
    info?: GraphQLResolveInfo
  ): AsyncIterator<R | Result>;
  resolve?<R = Result, P = Parent>(
    parent?: P,
    args?: Args,
    context?: Context,
    info?: GraphQLResolveInfo
  ): R | Result | Promise<R | Result>;
};

export type DateTime = any;

export type Json = any;

export interface Query {
  deviceConfiguration: DeviceConfiguration /** Get the details of one DeviceConfiguration object */;
  deviceConfigurations: DeviceConfiguration[] /** Get all the configured devices as DeviceConfiguration objects */;
  deviceControllerConfiguration: DeviceControllerConfiguration /** Get the details of one DeviceControllerConfiguration object */;
  deviceDiscoveryLog: DeviceDiscoveryLog /** Get one DeviceDiscoveryLog */;
  deviceDiscoveryLogs: DeviceDiscoveryLog[] /** List DeviceDiscoveryLogs with scope arguments */;
  farm: Farm /** Get the details of the current farm */;
  farmZones: FarmZone[] /** Get the list of zones for the current farm */;
}

export interface DeviceConfiguration {
  controllers: DeviceController[];
  data?: Json | null;
  dataAddress: string;
  deviceClass: string;
  deviceControllerConfigurations: DeviceControllerConfiguration[];
  deviceDiscoveryLog?: DeviceDiscoveryLog | null;
  deviceName: string;
  farmZone: FarmZone;
  farmZoneId: string;
  humanName: string;
  humanNameWithZone: string;
  id: string;
  imageUrl: string;
  lastSeen: DateTime;
  publishers: DevicePublisher[];
}

export interface DeviceController {
  controlStrategyHumanName: string;
  deviceControllerConfiguration: DeviceControllerConfiguration;
  field: string;
  humanName: string;
  humanState: DeviceControllerState;
  icon: string;
  nickname: string;
}

export interface DeviceControllerConfiguration {
  controller: DeviceController;
  controllerStateTransitions: ControllerStateTransition[];
  deviceConfiguration: DeviceConfiguration;
  enabled: boolean;
  field: string;
  id: string;
  nickname: string;
}

export interface ControllerStateTransition {
  confirmedAt?: DateTime | null;
  createdAt: DateTime;
  deviceControllerConfiguration: DeviceControllerConfiguration;
  id: string;
  initiator: string;
  toState: string;
  updatedAt: DateTime;
}

export interface DeviceDiscoveryLog {
  data?: Json | null;
  dataAddress: string;
  deviceClass: string;
  deviceName: string;
  enlistedConfiguration?: DeviceConfiguration | null;
  id: string;
  imageUrl: string;
  lastSeen: DateTime;
  proposedConfiguration: ProposedDeviceConfiguration;
}

export interface ProposedDeviceConfiguration {
  config: Json;
  controllers: DeviceController[];
  publishers: DevicePublisher[];
}

export interface DevicePublisher {
  comprehensionHumanName: string;
  comprehensionUnit?: string | null;
  field: string;
  humanName: string;
  humanValue: string;
  icon: string;
}

export interface FarmZone {
  deviceConfigurations: DeviceConfiguration[];
  id: string;
  name: string;
}

export interface Farm {
  dashboardHost: string;
  farmZones: FarmZone[];
  name: string;
}

export interface Mutation {
  enlistDevice?: EnlistDevicePayload | null;
  updateDeviceConfiguration?: UpdateDeviceConfigurationPayload | null;
  updateDeviceControllerState?: UpdateDeviceControllerStatePayload | null;
  updateFarm?: UpdateFarmPayload | null;
}
/** Autogenerated return type of EnlistDevice */
export interface EnlistDevicePayload {
  deviceConfiguration?: DeviceConfiguration | null;
  errors: string[];
}
/** Autogenerated return type of UpdateDeviceConfiguration */
export interface UpdateDeviceConfigurationPayload {
  deviceConfiguration?: DeviceConfiguration | null;
  errors: string[];
}
/** Autogenerated return type of UpdateDeviceControllerState */
export interface UpdateDeviceControllerStatePayload {
  controllerStateTransition?: ControllerStateTransition | null;
  deviceController?: DeviceController | null;
  deviceControllerConfiguration?: DeviceControllerConfiguration | null;
  errors: string[];
}
/** Autogenerated return type of UpdateFarm */
export interface UpdateFarmPayload {
  errors: string[];
  farm?: Farm | null;
}

export interface EnlistDeviceInput {
  deviceDiscoveryLogId: string;
  deviceNickname: string;
  farmZoneId: string;
  enlistControls?: EnlistControlInput[] | null;
}

export interface EnlistControlInput {
  field: string;
  controlNickname: string;
  enabled?: boolean | null;
}

export interface UpdateDeviceConfigurationInput {
  id: string;
  humanName?: string | null;
  farmZoneId?: string | null;
  deviceControllerConfigurations?: DeviceControllerConfigurationInput[] | null;
}

export interface DeviceControllerConfigurationInput {
  id: string;
  field: string;
  nickname: string;
  enabled?: boolean | null;
}

export interface UpdateDeviceControllerStateInput {
  id: string;
  state: string;
}

export interface UpdateFarmInput {
  name?: string | null;
  createFarmZones?: CreateFarmZoneInput[] | null;
  farmZones?: UpdateFarmZoneInput[] | null;
  deleteFarmZones?: DeleteFarmZoneInput[] | null;
}

export interface CreateFarmZoneInput {
  name: string;
}

export interface UpdateFarmZoneInput {
  id: string;
  name?: string | null;
}

export interface DeleteFarmZoneInput {
  id: string;
}
export interface DeviceConfigurationQueryArgs {
  id: string;
}
export interface DeviceControllerConfigurationQueryArgs {
  id: string;
}
export interface DeviceDiscoveryLogQueryArgs {
  id: string;
}
export interface DeviceDiscoveryLogsQueryArgs {
  filter?: DiscoveryStateFilter | null;
}
export interface EnlistDeviceMutationArgs {
  input: EnlistDeviceInput;
}
export interface UpdateDeviceConfigurationMutationArgs {
  input: UpdateDeviceConfigurationInput;
}
export interface UpdateDeviceControllerStateMutationArgs {
  input: UpdateDeviceControllerStateInput;
}
export interface UpdateFarmMutationArgs {
  input: UpdateFarmInput;
}

export enum DeviceControllerState {
  off = "off",
  on = "on",
  unknown = "unknown"
}

export enum DiscoveryStateFilter {
  DISMISSED = "DISMISSED",
  ENLISTED = "ENLISTED",
  PENDING = "PENDING"
}

export namespace QueryResolvers {
  export interface Resolvers<Context = any> {
    deviceConfiguration?: DeviceConfigurationResolver<
      DeviceConfiguration,
      any,
      Context
    > /** Get the details of one DeviceConfiguration object */;
    deviceConfigurations?: DeviceConfigurationsResolver<
      DeviceConfiguration[],
      any,
      Context
    > /** Get all the configured devices as DeviceConfiguration objects */;
    deviceControllerConfiguration?: DeviceControllerConfigurationResolver<
      DeviceControllerConfiguration,
      any,
      Context
    > /** Get the details of one DeviceControllerConfiguration object */;
    deviceDiscoveryLog?: DeviceDiscoveryLogResolver<
      DeviceDiscoveryLog,
      any,
      Context
    > /** Get one DeviceDiscoveryLog */;
    deviceDiscoveryLogs?: DeviceDiscoveryLogsResolver<
      DeviceDiscoveryLog[],
      any,
      Context
    > /** List DeviceDiscoveryLogs with scope arguments */;
    farm?: FarmResolver<
      Farm,
      any,
      Context
    > /** Get the details of the current farm */;
    farmZones?: FarmZonesResolver<
      FarmZone[],
      any,
      Context
    > /** Get the list of zones for the current farm */;
  }

  export type DeviceConfigurationResolver<
    R = DeviceConfiguration,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, DeviceConfigurationArgs>;
  export interface DeviceConfigurationArgs {
    id: string;
  }

  export type DeviceConfigurationsResolver<
    R = DeviceConfiguration[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceControllerConfigurationResolver<
    R = DeviceControllerConfiguration,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, DeviceControllerConfigurationArgs>;
  export interface DeviceControllerConfigurationArgs {
    id: string;
  }

  export type DeviceDiscoveryLogResolver<
    R = DeviceDiscoveryLog,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, DeviceDiscoveryLogArgs>;
  export interface DeviceDiscoveryLogArgs {
    id: string;
  }

  export type DeviceDiscoveryLogsResolver<
    R = DeviceDiscoveryLog[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, DeviceDiscoveryLogsArgs>;
  export interface DeviceDiscoveryLogsArgs {
    filter?: DiscoveryStateFilter | null;
  }

  export type FarmResolver<R = Farm, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type FarmZonesResolver<
    R = FarmZone[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace DeviceConfigurationResolvers {
  export interface Resolvers<Context = any> {
    controllers?: ControllersResolver<DeviceController[], any, Context>;
    data?: DataResolver<Json | null, any, Context>;
    dataAddress?: DataAddressResolver<string, any, Context>;
    deviceClass?: DeviceClassResolver<string, any, Context>;
    deviceControllerConfigurations?: DeviceControllerConfigurationsResolver<
      DeviceControllerConfiguration[],
      any,
      Context
    >;
    deviceDiscoveryLog?: DeviceDiscoveryLogResolver<
      DeviceDiscoveryLog | null,
      any,
      Context
    >;
    deviceName?: DeviceNameResolver<string, any, Context>;
    farmZone?: FarmZoneResolver<FarmZone, any, Context>;
    farmZoneId?: FarmZoneIdResolver<string, any, Context>;
    humanName?: HumanNameResolver<string, any, Context>;
    humanNameWithZone?: HumanNameWithZoneResolver<string, any, Context>;
    id?: IdResolver<string, any, Context>;
    imageUrl?: ImageUrlResolver<string, any, Context>;
    lastSeen?: LastSeenResolver<DateTime, any, Context>;
    publishers?: PublishersResolver<DevicePublisher[], any, Context>;
  }

  export type ControllersResolver<
    R = DeviceController[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DataResolver<
    R = Json | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DataAddressResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceClassResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceControllerConfigurationsResolver<
    R = DeviceControllerConfiguration[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceDiscoveryLogResolver<
    R = DeviceDiscoveryLog | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FarmZoneResolver<
    R = FarmZone,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FarmZoneIdResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type HumanNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type HumanNameWithZoneResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type IdResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type ImageUrlResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type LastSeenResolver<
    R = DateTime,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type PublishersResolver<
    R = DevicePublisher[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace DeviceControllerResolvers {
  export interface Resolvers<Context = any> {
    controlStrategyHumanName?: ControlStrategyHumanNameResolver<
      string,
      any,
      Context
    >;
    deviceControllerConfiguration?: DeviceControllerConfigurationResolver<
      DeviceControllerConfiguration,
      any,
      Context
    >;
    field?: FieldResolver<string, any, Context>;
    humanName?: HumanNameResolver<string, any, Context>;
    humanState?: HumanStateResolver<DeviceControllerState, any, Context>;
    icon?: IconResolver<string, any, Context>;
    nickname?: NicknameResolver<string, any, Context>;
  }

  export type ControlStrategyHumanNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceControllerConfigurationResolver<
    R = DeviceControllerConfiguration,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FieldResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type HumanNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type HumanStateResolver<
    R = DeviceControllerState,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type IconResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type NicknameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace DeviceControllerConfigurationResolvers {
  export interface Resolvers<Context = any> {
    controller?: ControllerResolver<DeviceController, any, Context>;
    controllerStateTransitions?: ControllerStateTransitionsResolver<
      ControllerStateTransition[],
      any,
      Context
    >;
    deviceConfiguration?: DeviceConfigurationResolver<
      DeviceConfiguration,
      any,
      Context
    >;
    enabled?: EnabledResolver<boolean, any, Context>;
    field?: FieldResolver<string, any, Context>;
    id?: IdResolver<string, any, Context>;
    nickname?: NicknameResolver<string, any, Context>;
  }

  export type ControllerResolver<
    R = DeviceController,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ControllerStateTransitionsResolver<
    R = ControllerStateTransition[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceConfigurationResolver<
    R = DeviceConfiguration,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type EnabledResolver<
    R = boolean,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FieldResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type IdResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type NicknameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace ControllerStateTransitionResolvers {
  export interface Resolvers<Context = any> {
    confirmedAt?: ConfirmedAtResolver<DateTime | null, any, Context>;
    createdAt?: CreatedAtResolver<DateTime, any, Context>;
    deviceControllerConfiguration?: DeviceControllerConfigurationResolver<
      DeviceControllerConfiguration,
      any,
      Context
    >;
    id?: IdResolver<string, any, Context>;
    initiator?: InitiatorResolver<string, any, Context>;
    toState?: ToStateResolver<string, any, Context>;
    updatedAt?: UpdatedAtResolver<DateTime, any, Context>;
  }

  export type ConfirmedAtResolver<
    R = DateTime | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type CreatedAtResolver<
    R = DateTime,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceControllerConfigurationResolver<
    R = DeviceControllerConfiguration,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type IdResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type InitiatorResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ToStateResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type UpdatedAtResolver<
    R = DateTime,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace DeviceDiscoveryLogResolvers {
  export interface Resolvers<Context = any> {
    data?: DataResolver<Json | null, any, Context>;
    dataAddress?: DataAddressResolver<string, any, Context>;
    deviceClass?: DeviceClassResolver<string, any, Context>;
    deviceName?: DeviceNameResolver<string, any, Context>;
    enlistedConfiguration?: EnlistedConfigurationResolver<
      DeviceConfiguration | null,
      any,
      Context
    >;
    id?: IdResolver<string, any, Context>;
    imageUrl?: ImageUrlResolver<string, any, Context>;
    lastSeen?: LastSeenResolver<DateTime, any, Context>;
    proposedConfiguration?: ProposedConfigurationResolver<
      ProposedDeviceConfiguration,
      any,
      Context
    >;
  }

  export type DataResolver<
    R = Json | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DataAddressResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceClassResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type EnlistedConfigurationResolver<
    R = DeviceConfiguration | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type IdResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type ImageUrlResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type LastSeenResolver<
    R = DateTime,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ProposedConfigurationResolver<
    R = ProposedDeviceConfiguration,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace ProposedDeviceConfigurationResolvers {
  export interface Resolvers<Context = any> {
    config?: ConfigResolver<Json, any, Context>;
    controllers?: ControllersResolver<DeviceController[], any, Context>;
    publishers?: PublishersResolver<DevicePublisher[], any, Context>;
  }

  export type ConfigResolver<R = Json, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type ControllersResolver<
    R = DeviceController[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type PublishersResolver<
    R = DevicePublisher[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace DevicePublisherResolvers {
  export interface Resolvers<Context = any> {
    comprehensionHumanName?: ComprehensionHumanNameResolver<
      string,
      any,
      Context
    >;
    comprehensionUnit?: ComprehensionUnitResolver<string | null, any, Context>;
    field?: FieldResolver<string, any, Context>;
    humanName?: HumanNameResolver<string, any, Context>;
    humanValue?: HumanValueResolver<string, any, Context>;
    icon?: IconResolver<string, any, Context>;
  }

  export type ComprehensionHumanNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ComprehensionUnitResolver<
    R = string | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FieldResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type HumanNameResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type HumanValueResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type IconResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
}

export namespace FarmZoneResolvers {
  export interface Resolvers<Context = any> {
    deviceConfigurations?: DeviceConfigurationsResolver<
      DeviceConfiguration[],
      any,
      Context
    >;
    id?: IdResolver<string, any, Context>;
    name?: NameResolver<string, any, Context>;
  }

  export type DeviceConfigurationsResolver<
    R = DeviceConfiguration[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type IdResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
  export type NameResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
}

export namespace FarmResolvers {
  export interface Resolvers<Context = any> {
    dashboardHost?: DashboardHostResolver<string, any, Context>;
    farmZones?: FarmZonesResolver<FarmZone[], any, Context>;
    name?: NameResolver<string, any, Context>;
  }

  export type DashboardHostResolver<
    R = string,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FarmZonesResolver<
    R = FarmZone[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type NameResolver<R = string, Parent = any, Context = any> = Resolver<
    R,
    Parent,
    Context
  >;
}

export namespace MutationResolvers {
  export interface Resolvers<Context = any> {
    enlistDevice?: EnlistDeviceResolver<
      EnlistDevicePayload | null,
      any,
      Context
    >;
    updateDeviceConfiguration?: UpdateDeviceConfigurationResolver<
      UpdateDeviceConfigurationPayload | null,
      any,
      Context
    >;
    updateDeviceControllerState?: UpdateDeviceControllerStateResolver<
      UpdateDeviceControllerStatePayload | null,
      any,
      Context
    >;
    updateFarm?: UpdateFarmResolver<UpdateFarmPayload | null, any, Context>;
  }

  export type EnlistDeviceResolver<
    R = EnlistDevicePayload | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, EnlistDeviceArgs>;
  export interface EnlistDeviceArgs {
    input: EnlistDeviceInput;
  }

  export type UpdateDeviceConfigurationResolver<
    R = UpdateDeviceConfigurationPayload | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, UpdateDeviceConfigurationArgs>;
  export interface UpdateDeviceConfigurationArgs {
    input: UpdateDeviceConfigurationInput;
  }

  export type UpdateDeviceControllerStateResolver<
    R = UpdateDeviceControllerStatePayload | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, UpdateDeviceControllerStateArgs>;
  export interface UpdateDeviceControllerStateArgs {
    input: UpdateDeviceControllerStateInput;
  }

  export type UpdateFarmResolver<
    R = UpdateFarmPayload | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context, UpdateFarmArgs>;
  export interface UpdateFarmArgs {
    input: UpdateFarmInput;
  }
}
/** Autogenerated return type of EnlistDevice */
export namespace EnlistDevicePayloadResolvers {
  export interface Resolvers<Context = any> {
    deviceConfiguration?: DeviceConfigurationResolver<
      DeviceConfiguration | null,
      any,
      Context
    >;
    errors?: ErrorsResolver<string[], any, Context>;
  }

  export type DeviceConfigurationResolver<
    R = DeviceConfiguration | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ErrorsResolver<
    R = string[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}
/** Autogenerated return type of UpdateDeviceConfiguration */
export namespace UpdateDeviceConfigurationPayloadResolvers {
  export interface Resolvers<Context = any> {
    deviceConfiguration?: DeviceConfigurationResolver<
      DeviceConfiguration | null,
      any,
      Context
    >;
    errors?: ErrorsResolver<string[], any, Context>;
  }

  export type DeviceConfigurationResolver<
    R = DeviceConfiguration | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ErrorsResolver<
    R = string[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}
/** Autogenerated return type of UpdateDeviceControllerState */
export namespace UpdateDeviceControllerStatePayloadResolvers {
  export interface Resolvers<Context = any> {
    controllerStateTransition?: ControllerStateTransitionResolver<
      ControllerStateTransition | null,
      any,
      Context
    >;
    deviceController?: DeviceControllerResolver<
      DeviceController | null,
      any,
      Context
    >;
    deviceControllerConfiguration?: DeviceControllerConfigurationResolver<
      DeviceControllerConfiguration | null,
      any,
      Context
    >;
    errors?: ErrorsResolver<string[], any, Context>;
  }

  export type ControllerStateTransitionResolver<
    R = ControllerStateTransition | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceControllerResolver<
    R = DeviceController | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type DeviceControllerConfigurationResolver<
    R = DeviceControllerConfiguration | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type ErrorsResolver<
    R = string[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}
/** Autogenerated return type of UpdateFarm */
export namespace UpdateFarmPayloadResolvers {
  export interface Resolvers<Context = any> {
    errors?: ErrorsResolver<string[], any, Context>;
    farm?: FarmResolver<Farm | null, any, Context>;
  }

  export type ErrorsResolver<
    R = string[],
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
  export type FarmResolver<
    R = Farm | null,
    Parent = any,
    Context = any
  > = Resolver<R, Parent, Context>;
}

export namespace GetDeviceControllerConfiguration {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    deviceControllerConfiguration: DeviceControllerConfiguration;
  };

  export type DeviceControllerConfiguration = {
    __typename?: "DeviceControllerConfiguration";
    field: string;
    nickname: string;
    enabled: boolean;
    controller: Controller;
    deviceConfiguration: DeviceConfiguration;
    controllerStateTransitions: ControllerStateTransitions[];
  };

  export type Controller = {
    __typename?: "DeviceController";
    humanName: string;
    humanState: DeviceControllerState;
    controlStrategyHumanName: string;
    icon: string;
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    humanName: string;
  };

  export type ControllerStateTransitions = {
    __typename?: "ControllerStateTransition";
    toState: string;
    initiator: string;
    confirmedAt?: DateTime | null;
    createdAt: DateTime;
  };
}

export namespace UpdateDeviceControllerState {
  export type Variables = {
    input: UpdateDeviceControllerStateInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateDeviceControllerState?: UpdateDeviceControllerState | null;
  };

  export type UpdateDeviceControllerState = {
    __typename?: "UpdateDeviceControllerStatePayload";
    deviceController?: DeviceController | null;
  };

  export type DeviceController = {
    __typename?: "DeviceController";
    humanState: DeviceControllerState;
  };
}

export namespace GetEnlist {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    deviceDiscoveryLog: DeviceDiscoveryLog;
    farmZones: FarmZones[];
  };

  export type DeviceDiscoveryLog = {
    __typename?: "DeviceDiscoveryLog";
    id: string;
    imageUrl: string;
    dataAddress: string;
    deviceName: string;
    lastSeen: DateTime;
    proposedConfiguration: ProposedConfiguration;
    enlistedConfiguration?: EnlistedConfiguration | null;
  };

  export type ProposedConfiguration = {
    __typename?: "ProposedDeviceConfiguration";
    publishers: Publishers[];
    controllers: Controllers[];
  };

  export type Publishers = {
    __typename?: "DevicePublisher";
    humanName: string;
    comprehensionHumanName: string;
    comprehensionUnit?: string | null;
    icon: string;
  };

  export type Controllers = {
    __typename?: "DeviceController";
    field: string;
    humanName: string;
    controlStrategyHumanName: string;
    icon: string;
  };

  export type EnlistedConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    humanName: string;
    humanNameWithZone: string;
    deviceName: string;
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}

export namespace SendEnlist {
  export type Variables = {
    input: EnlistDeviceInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    enlistDevice?: EnlistDevice | null;
  };

  export type EnlistDevice = {
    __typename?: "EnlistDevicePayload";
    deviceConfiguration?: DeviceConfiguration | null;
    errors: string[];
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
  };
}

export namespace GetDeviceDiscoveryLogs {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    deviceDiscoveryLogs: DeviceDiscoveryLogs[];
  };

  export type DeviceDiscoveryLogs = {
    __typename?: "DeviceDiscoveryLog";
    id: string;
    imageUrl: string;
    dataAddress: string;
    deviceName: string;
    lastSeen: DateTime;
    data?: Json | null;
    enlistedConfiguration?: EnlistedConfiguration | null;
  };

  export type EnlistedConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    humanName: string;
    deviceName: string;
  };
}

export namespace GetDeviceConfiguration {
  export type Variables = {
    id: string;
  };

  export type Query = {
    __typename?: "Query";
    deviceConfiguration: DeviceConfiguration;
    farmZones: FarmZones[];
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
    imageUrl: string;
    humanName: string;
    deviceName: string;
    lastSeen: DateTime;
    dataAddress: string;
    publishers: Publishers[];
    deviceControllerConfigurations: DeviceControllerConfigurations[];
    farmZoneId: string;
  };

  export type Publishers = {
    __typename?: "DevicePublisher";
    humanName: string;
    humanValue: string;
    comprehensionHumanName: string;
    comprehensionUnit?: string | null;
    icon: string;
  };

  export type DeviceControllerConfigurations = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
    field: string;
    nickname: string;
    enabled: boolean;
    controller: Controller;
  };

  export type Controller = {
    __typename?: "DeviceController";
    humanName: string;
    humanState: DeviceControllerState;
    controlStrategyHumanName: string;
    icon: string;
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}

export namespace UpdateDeviceConfiguration {
  export type Variables = {
    input: UpdateDeviceConfigurationInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateDeviceConfiguration?: UpdateDeviceConfiguration | null;
  };

  export type UpdateDeviceConfiguration = {
    __typename?: "UpdateDeviceConfigurationPayload";
    deviceConfiguration?: DeviceConfiguration | null;
  };

  export type DeviceConfiguration = {
    __typename?: "DeviceConfiguration";
    id: string;
  };
}

export namespace GetDeviceConfigurations {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    name: string;
    id: string;
    deviceConfigurations: DeviceConfigurations[];
  };

  export type DeviceConfigurations = {
    __typename?: "DeviceConfiguration";
    id: string;
    imageUrl: string;
    humanName: string;
    deviceName: string;
    lastSeen: DateTime;
    dataAddress: string;
    publishers: Publishers[];
    controllers: Controllers[];
    farmZone: FarmZone;
  };

  export type Publishers = {
    __typename?: "DevicePublisher";
    humanName: string;
    humanValue: string;
    comprehensionHumanName: string;
    comprehensionUnit?: string | null;
    icon: string;
  };

  export type Controllers = {
    __typename?: "DeviceController";
    field: string;
    nickname: string;
    humanName: string;
    humanState: DeviceControllerState;
    controlStrategyHumanName: string;
    icon: string;
    deviceControllerConfiguration: DeviceControllerConfiguration;
  };

  export type DeviceControllerConfiguration = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
  };

  export type FarmZone = {
    __typename?: "FarmZone";
    name: string;
  };
}

export namespace GetFarm {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    farm: Farm;
  };

  export type Farm = {
    __typename?: "Farm";
    name: string;
    dashboardHost: string;
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    name: string;
    deviceConfigurations: DeviceConfigurations[];
  };

  export type DeviceConfigurations = {
    __typename?: "DeviceConfiguration";
    humanName: string;
    deviceControllerConfigurations: DeviceControllerConfigurations[];
  };

  export type DeviceControllerConfigurations = {
    __typename?: "DeviceControllerConfiguration";
    id: string;
    nickname: string;
    controller: Controller;
  };

  export type Controller = {
    __typename?: "DeviceController";
    icon: string;
    humanState: DeviceControllerState;
  };
}

export namespace GetFarmSettings {
  export type Variables = {};

  export type Query = {
    __typename?: "Query";
    farm: Farm;
  };

  export type Farm = {
    __typename?: "Farm";
    name: string;
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}

export namespace UpdateFarm {
  export type Variables = {
    input: UpdateFarmInput;
  };

  export type Mutation = {
    __typename?: "Mutation";
    updateFarm?: UpdateFarm | null;
  };

  export type UpdateFarm = {
    __typename?: "UpdateFarmPayload";
    farm?: Farm | null;
    errors: string[];
  };

  export type Farm = {
    __typename?: "Farm";
    name: string;
    farmZones: FarmZones[];
  };

  export type FarmZones = {
    __typename?: "FarmZone";
    id: string;
    name: string;
  };
}
