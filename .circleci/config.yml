# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: airhorns/kubernetes-deploy-client:0.1.3
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      # Dirty hack and for this I am sorry. docker-compose lets you override various options with a second yaml file passed with the
      # -f option, so we're using that to customize the compose setup for circle. This means that in development, the root level
      # docker-compose.yml file is used and everything looks normal, and then for this script that runs on circle special stuff can happen.
      # Sadly, I was unable to get around a bug on circle where the entrypoint wasn't being found when running containers. I isolated the issue
      # to happening because the entrypoint is in a mounted volume on circle, and disabling volumes on circle fixed this issue. Since circle
      # is responsible for building production docker containers, where we don't want to have to mount anything in via volumes, we can get
      # around the bug and build simpler containers by just not using volume mounts on circle. Sadly, docker-compose doesn't let you
      # override volume mounts, you can only add to them. So, to keep the normal docker-compose file the one for development, and to
      # get rid of these volumes, we use a dirty hack and rewrite the root file to not have any volumes to override in the first place.
      # I am sorry.
      - run: |
          ruby .circleci/remove-docker-compose-volumes.rb docker-compose.yml

      # build and start docker images
      - run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
          docker-compose -f docker-compose.yml -f .circleci/docker-compose.circle.yml up --build --no-start
          docker cp config/mosquitto.dev.conf mqtt-config:/mosquitto.conf
          docker-compose ps

      - run: |
          docker-compose -f docker-compose.yml -f .circleci/docker-compose.circle.yml run web bin/rake db:setup
          docker-compose -f docker-compose.yml -f .circleci/docker-compose.circle.yml run web bin/rails test

      - run: |
          docker tag airhorns/ifm airhorns/ifm:$CIRCLE_SHA1
          docker push airhorns/ifm:$CIRCLE_SHA1

      - deploy:
          name: Deploy Master to GKE
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              cd .circleci
              bundle
              echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
              gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
              gcloud config set project integrated-farm-manager
              gcloud config set compute/zone us-central-1
              gcloud container clusters get-credentials development-tiny
              ../config/deploy/deploy.sh
            fi
