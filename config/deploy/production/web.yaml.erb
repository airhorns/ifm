---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../../docker-compose.yml
    kompose.version: 1.14.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: web
  name: web
spec:
  ports:
  - name: "3000"
    port: 3000
    targetPort: 3000
  selector:
    io.kompose.service: web
status:
  loadBalancer: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../../docker-compose.yml
    kompose.version: 1.14.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: web
  name: web
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: web
    spec:
      containers:
        - name: web
          args:
            - bundle
            - exec
            - rails
            - s
            - -p
            - "3000"
            - -b
            - 0.0.0.0
          env:
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: localproxy_database_url
          - name: INFLUXDB_URL
            value: http://influxdb:8086/ifm_development
          - name: MQTT_URL
            valueFrom:
              secretKeyRef:
                name: cloudmqtt-credentials
                key: url
          - name: RAILS_ENV
            value: production
          - name: REDIS_URL
            value: redis://redis:6379/1
          image: airhorns/ifm:<%= current_sha %>
          ports:
          - containerPort: 3000
          resources: {}
          stdin: true
          tty: true
          restartPolicy: Always
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=integrated-farm-manager:us-central1:development-tiny-backend=tcp:3306",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
